from aiogram import Router, F, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from cfg import cfg
from common import bot, ai_manager
from db.models import User
from enums.enums import MenuAction, AIReceptMenuAction
from factory.client_factories import MenuCallbackFactory, AIMenuCallbackFactory
from filters.ai_filters import ProccessCooldown
from fsm.ai_fsm import AIGenerateReceiptFSM
from keyboards.client_keyboards import ai_recept_menu_kb

router = Router(name="client_ai_menu")

@router.callback_query(MenuCallbackFactory.filter(F.action == MenuAction.AI_RECEPT_MENU))
async def ai_recept_menu(call: types.CallbackQuery, session: AsyncSession):
    message = call.message

    user = await session.get(User, call.from_user.id)

    if user is None:
        return await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø—Ä–æ—Å—É")

    await message.edit_text("‚ú® –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ—Ü–µ–ø—Ç—É —Å—Ç—Ä–∞–≤–∏:", reply_markup=ai_recept_menu_kb())

@router.callback_query(AIMenuCallbackFactory.filter(F.action == AIReceptMenuAction.TEXT), ProccessCooldown())
async def ai_recept_text(call: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    message = call.message

    user = await session.get(User, call.from_user.id)

    if user is None:
        return await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø—Ä–æ—Å—É")

    await state.set_state(AIGenerateReceiptFSM.text)

    await message.edit_text("‚ú® –í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ —è–∫–∏—Ö –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É:")

@router.callback_query(AIMenuCallbackFactory.filter(F.action == AIReceptMenuAction.PHOTO), ProccessCooldown())
async def ai_recept_photo(call: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    message = call.message

    user = await session.get(User, call.from_user.id)

    if user is None:
        return await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø—Ä–æ—Å—É")

    await state.set_state(AIGenerateReceiptFSM.photo)

    await message.edit_text("‚ú® –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∑ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —ñ —è –∑–≥–µ–Ω–µ—Ä—É—é —Ä–µ—Ü–µ–ø—Ç —Å—Ç—Ä–∞–≤–∏:")

@router.message(ProccessCooldown(), AIGenerateReceiptFSM.text)
async def ai_recept_text_process(message: types.Message, session: AsyncSession, state: FSMContext):
    user = await session.get(User, message.from_user.id)

    if user is None:
        return await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø—Ä–æ—Å—É")

    await state.clear()

    first_message = await message.reply(f"üîé –î—É–º–∞—é...")
    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")

    response = await ai_manager.gpt(request=message.text, message=message)

    await first_message.edit_text(text=response, parse_mode=ParseMode.MARKDOWN)

@router.message(ProccessCooldown(), AIGenerateReceiptFSM.photo, F.content_type.in_({'photo'}))
async def ai_recept_photo_process(message: types.Message, session: AsyncSession, state: FSMContext):
    user = await session.get(User, message.from_user.id)

    if user is None:
        return await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø—Ä–æ—Å—É")

    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    photo = message.photo[-1]
    photo_as_file = await bot.get_file(file_id=photo.file_id)
    link = ""

    if photo_as_file:
        link = "https://api.telegram.org/file/bot" + cfg['token'] + "/" + photo_as_file.file_path

    print(link)

    first_message = await message.reply(f"üîé –î—É–º–∞—é...")
    await bot.send_chat_action(chat_id=message.from_user.id, action="typing")

    response = await ai_manager.vision(photo_link=link, message=message)

    await first_message.edit_text(text=response, parse_mode=ParseMode.MARKDOWN)