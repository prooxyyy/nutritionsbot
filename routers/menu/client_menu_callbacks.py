import random

from aiogram import Router, F, types
from sqlalchemy.ext.asyncio import AsyncSession

from common import HEALTH_TIPS
from db.models import User
from factory.client_factories import MenuCallbackFactory
from enums.enums import MenuAction, activity_level_names
from keyboards.client_keyboards import back_kb, main_menu_kb
from utils.utils import generate_food_list, calculate_daily_calories

router = Router(name="client_menu_callbacks")

@router.callback_query(MenuCallbackFactory.filter(F.action == MenuAction.OPEN))
async def open_menu(call: types.CallbackQuery):
    message = call.message

    await message.edit_text("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è!\n\n"
                            "ü•ô –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ —Ä—ñ–∑–Ω—ñ –∫–æ—Ä–∏—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–≤–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è.\n"
                            "‚§µÔ∏è –û–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:", reply_markup=main_menu_kb())

@router.callback_query(MenuCallbackFactory.filter(F.action == MenuAction.GEN_MENU))
async def generate_menu(call: types.CallbackQuery, session: AsyncSession):
    message = call.message

    user = await session.get(User, call.from_user.id)

    if user is None:
        return await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø—Ä–æ—Å—É")

    daily_calories = calculate_daily_calories(gender=user.gender, weight=user.weight, height=user.height, age=user.age,
                                              activity_level=user.activity_level)
    print(daily_calories)
    food_list = generate_food_list(calories=daily_calories)
    print(food_list)

    msg_text = "üòé –û—Å—å —â–æ –º–µ–Ω—ñ –≤–¥–∞–ª–æ—Å—å –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–ª—è —Ç–µ–±–µ:\n\n"

    for idx, food in enumerate(food_list, 1):
        msg_text += f"{idx}. <b>{food['name']}</b> - <b>{food['cal']} –∫–∫–∞–ª</b>\n"

    msg_text += "\n\n–ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –≤–∫–∞–∑–∞–Ω–∞ –∑–∞ 100 –≥—Ä–∞–º—ñ–≤"

    return await message.edit_text(msg_text, reply_markup=back_kb())

@router.callback_query(MenuCallbackFactory.filter(F.action == MenuAction.STATS))
async def statistics(call: types.CallbackQuery, session: AsyncSession):
    message = call.message

    user = await session.get(User, call.from_user.id)

    if user is None:
        return await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø—Ä–æ—Å—É")

    daily_calories = calculate_daily_calories(gender=user.gender, weight=user.weight, height=user.height, age=user.age,
                                              activity_level=user.activity_level)

    return await message.edit_text("üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                                   f"–î–µ–Ω–Ω–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä—ñ–π: <b>{daily_calories} –∫–∫–∞–ª</b>\n"
                                   f"–í–∞–≥–∞: <b>{user.weight} –∫–≥</b>\n"
                                   f"–ó—Ä—ñ—Å—Ç: <b>{user.height} —Å–º</b>\n"
                                   f"–†—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: <b>{activity_level_names[user.activity_level]}</b>", reply_markup=back_kb())

@router.callback_query(MenuCallbackFactory.filter(F.action == MenuAction.HEALTH_TIPS))
async def health_tips(call: types.CallbackQuery, session: AsyncSession):
    message = call.message

    user = await session.get(User, call.from_user.id)

    if user is None:
        return await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø—Ä–æ—Å—É")

    tip = random.choice(HEALTH_TIPS)

    return await message.edit_text("ü§ì –ü–æ—Ä–∞–¥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n"
                                   f"{tip}", reply_markup=back_kb())