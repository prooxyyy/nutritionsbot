from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import User
from factory.client_factories import RegisterStepGenderCallbackFactory, RegisterStepActivityLevelCallbackFactory
from fsm.client_register_fsm import RegisterFSM
from keyboards.client_keyboards import main_menu_kb
from keyboards.register_keyboards import register_gender_kb, register_activity_level_kb

router = Router(name="client_commands")


@router.message(CommandStart())
async def start(message: types.Message, state: FSMContext, session: AsyncSession):
    if await state.get_state() is not None:
        await state.clear()

    user = await session.get(User, message.from_user.id)

    if user is None:
        await state.set_state(RegisterFSM.gender)

        return await message.answer("–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –ø–æ—á–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ö–∞—Ä—á—É–≤–∞—Ç–∏—Å—è ‚ò∫Ô∏è\n\n"
                                    "–ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –æ —Ç–æ–±—ñ —Ç—Ä–æ—à–∫–∏ –±—ñ–ª—å—à–µ. –¢–∏ —Ö–ª–æ–ø–µ—Ü—å —á–∏ –¥—ñ–≤—á–∏–Ω–∞?",
                                    reply_markup=register_gender_kb())
    else:
        return await message.answer("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è!\n\n"
                                    "ü•ô –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ —Ä—ñ–∑–Ω—ñ –∫–æ—Ä–∏—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–≤–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è.\n"
                                    "‚§µÔ∏è –û–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:", reply_markup=main_menu_kb())


@router.callback_query(RegisterStepGenderCallbackFactory.filter(), RegisterFSM.gender)
async def register_step1(call: types.CallbackQuery, state: FSMContext,
                         callback_data: RegisterStepGenderCallbackFactory):
    message = call.message

    await state.set_data({"gender": callback_data.gender})
    await state.set_state(RegisterFSM.age)

    await message.edit_text("‚ò∫Ô∏è <b>–ß—É–¥–æ–≤–æ!</b> –í–∫–∞–∂—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–∫:")


@router.message(RegisterFSM.age)
async def register_step2(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π –≤—ñ–∫!")

    age = int(message.text)

    if age < 1 or age > 100:
        return await message.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π –≤—ñ–∫!")

    state_data = await state.get_data()
    await state.update_data(state_data, age=age)
    await state.set_state(RegisterFSM.height)

    await message.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç (—É —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")


@router.message(RegisterFSM.height)
async def register_step3(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π –∑—Ä—ñ—Å—Ç!")

    height = int(message.text)

    if height < 120 or height > 300:
        return await message.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π –∑—Ä—ñ—Å—Ç!")

    state_data = await state.get_data()
    await state.update_data(state_data, height=height)
    await state.set_state(RegisterFSM.weight)

    await message.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (—É –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö):")


@router.message(RegisterFSM.weight)
async def register_step4(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É –≤–∞–≥—É!")

    weight = int(message.text)

    if weight < 25 or weight > 250:
        return await message.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É –≤–∞–≥—É!")

    state_data = await state.get_data()
    await state.update_data(state_data, weight=weight)
    await state.set_state(RegisterFSM.activity_level)

    await message.reply("üí™ –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ñ—ñ–∑–∏—á–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:", reply_markup=register_activity_level_kb())


@router.callback_query(RegisterStepActivityLevelCallbackFactory.filter())
async def register_step5(call: types.CallbackQuery, state: FSMContext,
                         callback_data: RegisterStepActivityLevelCallbackFactory, session: AsyncSession):
    message = call.message

    user = await session.get(User, call.from_user.id)

    state_data = await state.get_data()

    print(state_data)

    if user is None:
        try:
            user = User(user_id=call.from_user.id)

            user.gender = state_data['gender']
            user.age = state_data['age']
            user.height = state_data['height']
            user.weight = state_data['weight']
            user.activity_level = callback_data.activity_level

            await session.merge(user)

            await session.commit()

            await state.clear()

            await message.edit_text("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è!\n\n"
                                    "ü•ô –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ —Ä—ñ–∑–Ω—ñ –∫–æ—Ä–∏—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–≤–æ–≥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è.\n"
                                    "‚§µÔ∏è –û–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:", reply_markup=main_menu_kb())
        except Exception as e:
            print(e)
    else:
        await message.edit_text("–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é.")
